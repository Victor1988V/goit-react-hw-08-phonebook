{"version":3,"file":"static/js/515.19ee95ec.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/FormPhonebook/FormPhonebook.styled.jsx","components/FormPhonebook/FormPhonebook.jsx","components/Filter/Filter.styled.jsx","redux/filter/filter.selectors.js","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","pages/Contacts.js"],"sourcesContent":["export const selectLoading = state => state.contacts.isLoading;\nexport const selectContacts = state => state.contacts.items;\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const Formfield = styled(Form)`\n  margin-top: 10px;\n  margin-bottom: 30px;\n`;\n\nexport const Input = styled(Field)`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 10px;\n  width: 50%;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 15px;\n\n  &:focus {\n    outline-color: var(--accentColor);\n  }\n\n  &:hover {\n    border: 1px solid var(--accentColor);\n  }\n\n  &:hover::-webkit-input-placeholder {\n    color: var(--accentColor);\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 10px 20px;\n  background-color: var(--accentColor);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  opacity: 0.8;\n  transition: opacity 250ms var(--timingFn);\n\n  cursor: pointer;\n  color: #fff;\n  font-weight: 700;\n  font-size: 16px;\n  text-transform: uppercase;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 20px;\n  color: var(--secondaryTextColor);\n  font-weight: 500;\n  font-size: 20px;\n\n  &:hover {\n    color: var(--accentColor);\n  }\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { Formfield, Input, Label, Button } from './FormPhonebook.styled';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport default function FormPhonebook() {\n  const contacts = useSelector(contactsSelectors.selectContacts);\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const patternName =\n    /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n\n  const patternNumber =\n    /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\n  const schema = yup.object().shape({\n    name: yup\n      .string()\n      .min(2, 'Name is too Short!')\n      .max(30, 'name is too Long!')\n      .matches(\n        patternName,\n        'Name may contain only latin letters, apostrophe, dash and spaces.'\n      )\n      .required(),\n    number: yup\n      .string()\n      .min(6, 'Phone number must be less than 6 characters')\n      .matches(patternNumber, 'Phone number is not valid')\n      .required(),\n  });\n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase().trim()\n      )\n    ) {\n      alert(`${name} is already in contacts.`);\n      resetForm();\n    } else if (contacts.find(contact => contact.number === number)) {\n      alert(`${number} is already in contacts.`);\n      resetForm();\n    } else {\n      dispatch(contactsOperations.addContact({ name, number }));\n      resetForm();\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <Formfield autoComplete=\"off\">\n        <Label>\n          Name\n          <Input type=\"text\" name=\"name\" />\n          <ErrorMessage\n            name=\"name\"\n            component=\"div\"\n            style={{ color: '#d95d5d' }}\n          />\n        </Label>\n        <Label>\n          Number\n          <Input type=\"tel\" name=\"number\" />\n          <ErrorMessage\n            name=\"number\"\n            component=\"div\"\n            style={{ color: '#d95d5d' }}\n          />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </Formfield>\n    </Formik>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: block;\n  margin-top: 10px;\n  color: var(--secondaryTextColor);\n  font-weight: 500;\n  font-size: 18px;\n`;\nexport const Input = styled.input`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 10px;\n  padding: 10px;\n  width: 50%;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 15px;\n\n  &:focus {\n    outline-color: var(--accentColor);\n  }\n\n  &:hover {\n    border: 1px solid var(--accentColor);\n  }\n`;\n","export const getFilterValue = state => state.filter.filter;\n","import { Label, Input } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/filter/filterSlice';\nimport { getFilterValue } from 'redux/filter/filter.selectors';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const value = useSelector(getFilterValue);\n\n  const changeInput = event => {\n    dispatch(changeFilter(event.currentTarget.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input type=\"text\" value={value} onChange={changeInput} />\n    </Label>\n  );\n}\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  margin-top: 30px;\n  color: var(--secondaryTextColor);\n  font-weight: 500;\n  font-size: 18px;\n`;\n\nexport const ContactsItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n\n  &:hover {\n    border-bottom: 1px solid var(--accentColor);\n  }\n`;\n\nexport const ContactsText = styled.p`\n  font-size: 12px;\n`;\n\nexport const Button = styled.button`\n  width: 30px;\n  height: auto;\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n  outline: none;\n  transition: transform 250ms var(--timingFn);\n\n  &:hover {\n    transform: scale(1.3);\n  }\n`;\n","import { TiTimesOutline } from 'react-icons/ti';\nimport {\n  ContactsList,\n  ContactsItem,\n  ContactsText,\n  Button,\n} from './ContactsList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilterValue } from 'redux/filter/filter.selectors';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\n\nconst getFilterContacts = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  const filterContact = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n  return filterContact;\n};\n\nfunction Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.selectContacts);\n  const filter = useSelector(getFilterValue);\n\n  const filteredContacts = getFilterContacts(contacts, filter);\n\n  return (\n    <ContactsList>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ContactsItem key={id}>\n          <ContactsText>\n            {name}: {number}\n          </ContactsText>\n          <Button\n            type=\"button\"\n            onClick={() => {\n              dispatch(contactsOperations.deleteContact(id));\n            }}\n          >\n            <TiTimesOutline\n              style={{\n                color: 'var(--accentColor)',\n              }}\n            />\n          </Button>\n        </ContactsItem>\n      ))}\n    </ContactsList>\n  );\n}\n\nexport default Contacts;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\n\nimport Container from 'components/Container';\nimport FormPhonebook from 'components/FormPhonebook';\nimport Filter from 'components/Filter';\nimport ContactsList from 'components/ContactsList';\n\nexport default function Contacts() {\n  const contacts = useSelector(contactsSelectors.selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <h2>Add Contact</h2>\n      <FormPhonebook />\n      <h2>Contacts</h2>\n      {contacts.length > 1 && <Filter />}\n      {contacts.length > 0 ? (\n        <ContactsList />\n      ) : (\n        <p style={{ color: 'red' }}>\n          Your phonebook is empty. Please add contact.\n        </p>\n      )}\n    </Container>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","Formfield","styled","Form","Input","Field","Button","Label","FormPhonebook","useSelector","contactsSelectors","dispatch","useDispatch","schema","yup","shape","name","min","max","matches","required","number","initialValues","onSubmit","resetForm","find","contact","toLowerCase","trim","alert","contactsOperations","addContact","validationSchema","autoComplete","type","component","style","color","getFilterValue","filter","value","onChange","event","changeFilter","currentTarget","ContactsList","ContactsItem","ContactsText","filteredContacts","normalizedFilter","includes","getFilterContacts","map","id","onClick","deleteContact","Contacts","useEffect","fetchContacts","Container","length"],"sourceRoot":""}